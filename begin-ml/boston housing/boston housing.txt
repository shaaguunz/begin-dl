{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from scipy.stats import norm,skew\n",
    "from scipy import stats\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv(\"train.csv\")\n",
    "test = pd.read_csv(\"test.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "4   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Gar2</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>120</td>\n",
       "      <td>RL</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>HLS</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n",
       "1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n",
       "2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n",
       "3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n",
       "4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n",
       "0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n",
       "1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n",
       "2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n",
       "3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n",
       "4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n",
       "\n",
       "  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n",
       "0       0      6    2010        WD         Normal  \n",
       "1   12500      6    2010        WD         Normal  \n",
       "2       0      3    2010        WD         Normal  \n",
       "3       0      6    2010        WD         Normal  \n",
       "4       0      1    2010        WD         Normal  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((1460, 81), (1459, 80))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape,test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
       "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
       "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
       "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
       "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
       "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
       "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
       "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
       "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
       "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
       "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
       "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
       "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
       "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
       "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
       "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
       "       'SaleCondition', 'SalePrice'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   object \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   object \n",
      " 6   Alley          91 non-null     object \n",
      " 7   LotShape       1460 non-null   object \n",
      " 8   LandContour    1460 non-null   object \n",
      " 9   Utilities      1460 non-null   object \n",
      " 10  LotConfig      1460 non-null   object \n",
      " 11  LandSlope      1460 non-null   object \n",
      " 12  Neighborhood   1460 non-null   object \n",
      " 13  Condition1     1460 non-null   object \n",
      " 14  Condition2     1460 non-null   object \n",
      " 15  BldgType       1460 non-null   object \n",
      " 16  HouseStyle     1460 non-null   object \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   object \n",
      " 22  RoofMatl       1460 non-null   object \n",
      " 23  Exterior1st    1460 non-null   object \n",
      " 24  Exterior2nd    1460 non-null   object \n",
      " 25  MasVnrType     1452 non-null   object \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   object \n",
      " 28  ExterCond      1460 non-null   object \n",
      " 29  Foundation     1460 non-null   object \n",
      " 30  BsmtQual       1423 non-null   object \n",
      " 31  BsmtCond       1423 non-null   object \n",
      " 32  BsmtExposure   1422 non-null   object \n",
      " 33  BsmtFinType1   1423 non-null   object \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1422 non-null   object \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   object \n",
      " 40  HeatingQC      1460 non-null   object \n",
      " 41  CentralAir     1460 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   object \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   object \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    770 non-null    object \n",
      " 58  GarageType     1379 non-null   object \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1379 non-null   object \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1379 non-null   object \n",
      " 64  GarageCond     1379 non-null   object \n",
      " 65  PavedDrive     1460 non-null   object \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         7 non-null      object \n",
      " 73  Fence          281 non-null    object \n",
      " 74  MiscFeature    54 non-null     object \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   object \n",
      " 79  SaleCondition  1460 non-null   object \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(35), object(43)\n",
      "memory usage: 924.0+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count      1460.000000\n",
       "mean     180921.195890\n",
       "std       79442.502883\n",
       "min       34900.000000\n",
       "25%      129975.000000\n",
       "50%      163000.000000\n",
       "75%      214000.000000\n",
       "max      755000.000000\n",
       "Name: SalePrice, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#since sales prices is our target variable\n",
    "train['SalePrice'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "preprocessing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#pearson correlation\n",
    "corr_matrix = train.corr()\n",
    "plt.figure(figsize=(12,8))\n",
    "sns.heatmap(corr_matrix, cmap=plt.cm.Accent_r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "so seems like there are 2 green "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#now for sales price\n",
    "k = 10\n",
    "cols = corr_matrix.nlargest(k, 'SalePrice')['SalePrice'].index\n",
    "k_corr_matrix = train[cols].corr()\n",
    "#plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(k_corr_matrix, annot=True, cmap=plt.cm.RdBu_r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "most correlated features\n",
    "overallqual ,grilivatea, garage areas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x1314b1de488>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x1008 with 56 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols=['SalePrice','OverallQual','GrLivArea','GarageCars','TotalBsmtSF','FullBath','YearBuilt']\n",
    "sns.pairplot(train[cols],height = 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "few hof them have a linear relationship<br>\n",
    "TotalBSmtsf and GrLIvArea<br>\n",
    "GrlivAre ~ saleprice and totalbsmtsf ~ saleprice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x2160 with 18 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16,30))\n",
    "for idx, f in enumerate(['OverallQual','GrLivArea',\n",
    "                        'GarageArea','GarageCars','TotalBsmtSF','1stFlrSF',\n",
    "                        'FullBath','TotRmsAbvGrd','YearBuilt']):\n",
    "    plt.subplot(9,2,2*idx+1)\n",
    "    sns.distplot(train[f])\n",
    "    plt.subplot(9,2,2*idx+2)\n",
    "    sns.scatterplot(x=f,y='SalePrice',data =train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,12))\n",
    "train.corr()['SalePrice'].sort_values().plot(kind='barh')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#analyzing the target variable first to see if it fits a normal distrubution\n",
    "sns.distplot(train['SalePrice'],fit=norm)\n",
    "(mu,sigma)=norm.fit(train['SalePrice'])\n",
    "plt.legend(['Normal dist ($\\mu=${:2f},$\\sigma=${:2f}) '.format(mu,sigma)])\n",
    "plt.ylabel(\"frequency\")\n",
    "plt.title('Saleprice Distribution')\n",
    "\n",
    "#normal probability plot\n",
    "fig = plt.figure()\n",
    "res= stats.probplot(train['SalePrice'], plot=plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "skewness  1.8828757597682129\n",
      "kurtosis  6.536281860064529\n"
     ]
    }
   ],
   "source": [
    "#skewnesss and kurtosis\n",
    "print(\"skewness \",train['SalePrice'].skew())\n",
    "print(\"kurtosis \",train['SalePrice'].kurt())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#applying log transformation on saleprice\n",
    "train['SalePriceLog'] = np.log1p(train['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#distribution histogram and normal probability plot\n",
    "(mu,sigma)=norm.fit(train['SalePriceLog'])\n",
    "\n",
    "\n",
    "sns.distplot(train['SalePriceLog'], fit = norm)\n",
    "plt.legend(['Normal dist  mi =${:2f},  sigmla =${:2f}'.format(mu,sigma)])\n",
    "fig = plt.figure()\n",
    "stats.probplot(train['SalePriceLog'], plot = plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "outliers\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Saleprice distribution<br>\n",
    "standardize the data and see if any outlier points\n",
    "x = (x-mu)/sigma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\ipykernel_launcher.py:1: FutureWarning: Support for multi-dimensional indexing (e.g. `obj[:, None]`) is deprecated and will be removed in a future version.  Convert to a numpy array before indexing instead.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "outer range (low) of the distribution: \n",
      "[[-1.83870376]\n",
      " [-1.83352844]\n",
      " [-1.80092766]\n",
      " [-1.78329881]\n",
      " [-1.77448439]\n",
      " [-1.62337999]\n",
      " [-1.61708398]\n",
      " [-1.58560389]\n",
      " [-1.58560389]\n",
      " [-1.5731    ]]\n",
      "outer range (high) of the distribution: \n",
      "[[3.82897043]\n",
      " [4.04098249]\n",
      " [4.49634819]\n",
      " [4.71041276]\n",
      " [4.73032076]\n",
      " [5.06214602]\n",
      " [5.42383959]\n",
      " [5.59185509]\n",
      " [7.10289909]\n",
      " [7.22881942]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sale_price_scaled= StandardScaler().fit_transform(train['SalePrice'][:,np.newaxis])\n",
    "\n",
    "sns.distplot(sale_price_scaled, fit =norm)\n",
    "\n",
    "low_range= sale_price_scaled[sale_price_scaled[:,0].argsort()[:10]]\n",
    "\n",
    "high_range=sale_price_scaled[sale_price_scaled[:,0].argsort()[-10:]]\n",
    "print(f'outer range (low) of the distribution: \\n{low_range}')\n",
    "print(f'outer range (high) of the distribution: \\n{high_range}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "low is within2 sd(sigma)\n",
    "high like 7.x are out of range\n",
    "at least the 2 points with value greater than 7 should be considered as outlier\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='GrLivArea', ylabel='SalePrice'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot\n",
    "train.plot.scatter(x='GrLivArea', y= 'SalePrice', ylim=(0.800000), xlim=(0,6000))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "points geater than 6000 in case of saelprice and 00 in case of GrLIveArea are definitely outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = train[train['GrLivArea']<4000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='GrLivArea', ylabel='SalePrice'>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#scatter plot\n",
    "train.plot.scatter(x='GrLivArea', y= 'SalePrice', ylim=(0.800000), xlim=(0,6000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#feature engineering\n",
    "#quantitative and qualitative\n",
    "quantitative = [ f for f in train.columns if train.dtypes[f]!='object']\n",
    "quantitative.remove('SalePrice')\n",
    "quantitative.remove('Id')\n",
    "quantitative.sort()\n",
    "qualitative= [f for f in train.columns if train.dtypes[f]=='object']\n",
    "qualitative.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1stFlrSF',\n",
       " '2ndFlrSF',\n",
       " '3SsnPorch',\n",
       " 'BedroomAbvGr',\n",
       " 'BsmtFinSF1',\n",
       " 'BsmtFinSF2',\n",
       " 'BsmtFullBath',\n",
       " 'BsmtHalfBath',\n",
       " 'BsmtUnfSF',\n",
       " 'EnclosedPorch',\n",
       " 'Fireplaces',\n",
       " 'FullBath',\n",
       " 'GarageArea',\n",
       " 'GarageCars',\n",
       " 'GarageYrBlt',\n",
       " 'GrLivArea',\n",
       " 'HalfBath',\n",
       " 'KitchenAbvGr',\n",
       " 'LotArea',\n",
       " 'LotFrontage',\n",
       " 'LowQualFinSF',\n",
       " 'MSSubClass',\n",
       " 'MasVnrArea',\n",
       " 'MiscVal',\n",
       " 'MoSold',\n",
       " 'OpenPorchSF',\n",
       " 'OverallCond',\n",
       " 'OverallQual',\n",
       " 'PoolArea',\n",
       " 'SalePriceLog',\n",
       " 'ScreenPorch',\n",
       " 'TotRmsAbvGrd',\n",
       " 'TotalBsmtSF',\n",
       " 'WoodDeckSF',\n",
       " 'YearBuilt',\n",
       " 'YearRemodAdd',\n",
       " 'YrSold']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#continuous\n",
    "quantitative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Alley',\n",
       " 'BldgType',\n",
       " 'BsmtCond',\n",
       " 'BsmtExposure',\n",
       " 'BsmtFinType1',\n",
       " 'BsmtFinType2',\n",
       " 'BsmtQual',\n",
       " 'CentralAir',\n",
       " 'Condition1',\n",
       " 'Condition2',\n",
       " 'Electrical',\n",
       " 'ExterCond',\n",
       " 'ExterQual',\n",
       " 'Exterior1st',\n",
       " 'Exterior2nd',\n",
       " 'Fence',\n",
       " 'FireplaceQu',\n",
       " 'Foundation',\n",
       " 'Functional',\n",
       " 'GarageCond',\n",
       " 'GarageFinish',\n",
       " 'GarageQual',\n",
       " 'GarageType',\n",
       " 'Heating',\n",
       " 'HeatingQC',\n",
       " 'HouseStyle',\n",
       " 'KitchenQual',\n",
       " 'LandContour',\n",
       " 'LandSlope',\n",
       " 'LotConfig',\n",
       " 'LotShape',\n",
       " 'MSZoning',\n",
       " 'MasVnrType',\n",
       " 'MiscFeature',\n",
       " 'Neighborhood',\n",
       " 'PavedDrive',\n",
       " 'PoolQC',\n",
       " 'RoofMatl',\n",
       " 'RoofStyle',\n",
       " 'SaleCondition',\n",
       " 'SaleType',\n",
       " 'Street',\n",
       " 'Utilities']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#categorical\n",
    "qualitative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#concatenating test and train\n",
    "train.reset_index(drop =True,inplace = True)\n",
    "y_train = train['SalePriceLog']\n",
    "X_train = train.drop(['SalePrice','SalePriceLog'], axis = 1)\n",
    "X_test= test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2915, 79)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data = pd.concat([X_train,test], axis = 0 ,sort=False)\n",
    "all_data.drop(['Id'], axis = 1, inplace=True)\n",
    "all_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>Ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PoolQC</th>\n",
       "      <td>2907</td>\n",
       "      <td>0.997256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MiscFeature</th>\n",
       "      <td>2810</td>\n",
       "      <td>0.963979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alley</th>\n",
       "      <td>2717</td>\n",
       "      <td>0.932075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fence</th>\n",
       "      <td>2345</td>\n",
       "      <td>0.804460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FireplaceQu</th>\n",
       "      <td>1420</td>\n",
       "      <td>0.487136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotFrontage</th>\n",
       "      <td>486</td>\n",
       "      <td>0.166724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageCond</th>\n",
       "      <td>159</td>\n",
       "      <td>0.054545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageQual</th>\n",
       "      <td>159</td>\n",
       "      <td>0.054545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <td>159</td>\n",
       "      <td>0.054545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageFinish</th>\n",
       "      <td>159</td>\n",
       "      <td>0.054545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageType</th>\n",
       "      <td>157</td>\n",
       "      <td>0.053859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtCond</th>\n",
       "      <td>82</td>\n",
       "      <td>0.028130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtExposure</th>\n",
       "      <td>82</td>\n",
       "      <td>0.028130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtQual</th>\n",
       "      <td>81</td>\n",
       "      <td>0.027787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <td>80</td>\n",
       "      <td>0.027444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <td>79</td>\n",
       "      <td>0.027101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MasVnrType</th>\n",
       "      <td>24</td>\n",
       "      <td>0.008233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MasVnrArea</th>\n",
       "      <td>23</td>\n",
       "      <td>0.007890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSZoning</th>\n",
       "      <td>4</td>\n",
       "      <td>0.001372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utilities</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Functional</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <td>2</td>\n",
       "      <td>0.000686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exterior2nd</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exterior1st</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SaleType</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Electrical</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KitchenQual</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageArea</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageCars</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OverallQual</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OverallCond</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotArea</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Street</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotShape</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LandContour</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotConfig</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LandSlope</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neighborhood</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condition1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Condition2</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BldgType</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RoofMatl</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HouseStyle</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RoofStyle</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Total     Ratio\n",
       "PoolQC         2907  0.997256\n",
       "MiscFeature    2810  0.963979\n",
       "Alley          2717  0.932075\n",
       "Fence          2345  0.804460\n",
       "FireplaceQu    1420  0.487136\n",
       "LotFrontage     486  0.166724\n",
       "GarageCond      159  0.054545\n",
       "GarageQual      159  0.054545\n",
       "GarageYrBlt     159  0.054545\n",
       "GarageFinish    159  0.054545\n",
       "GarageType      157  0.053859\n",
       "BsmtCond         82  0.028130\n",
       "BsmtExposure     82  0.028130\n",
       "BsmtQual         81  0.027787\n",
       "BsmtFinType2     80  0.027444\n",
       "BsmtFinType1     79  0.027101\n",
       "MasVnrType       24  0.008233\n",
       "MasVnrArea       23  0.007890\n",
       "MSZoning          4  0.001372\n",
       "BsmtHalfBath      2  0.000686\n",
       "Utilities         2  0.000686\n",
       "Functional        2  0.000686\n",
       "BsmtFullBath      2  0.000686\n",
       "BsmtFinSF2        1  0.000343\n",
       "BsmtFinSF1        1  0.000343\n",
       "Exterior2nd       1  0.000343\n",
       "BsmtUnfSF         1  0.000343\n",
       "TotalBsmtSF       1  0.000343\n",
       "Exterior1st       1  0.000343\n",
       "SaleType          1  0.000343\n",
       "Electrical        1  0.000343\n",
       "KitchenQual       1  0.000343\n",
       "GarageArea        1  0.000343\n",
       "GarageCars        1  0.000343\n",
       "OverallQual       0  0.000000\n",
       "OverallCond       0  0.000000\n",
       "LotArea           0  0.000000\n",
       "Street            0  0.000000\n",
       "LotShape          0  0.000000\n",
       "LandContour       0  0.000000\n",
       "LotConfig         0  0.000000\n",
       "LandSlope         0  0.000000\n",
       "Neighborhood      0  0.000000\n",
       "Condition1        0  0.000000\n",
       "Condition2        0  0.000000\n",
       "BldgType          0  0.000000\n",
       "RoofMatl          0  0.000000\n",
       "HouseStyle        0  0.000000\n",
       "RoofStyle         0  0.000000\n",
       "YearRemodAdd      0  0.000000"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#missing data\n",
    "na_tot= all_data.isnull().sum().sort_values(ascending=False)\n",
    "na_ratio= (all_data.isnull().sum()/all_data.shape[0]).sort_values(ascending=False)\n",
    "missing_data= pd.concat([na_tot,na_ratio], axis = 1, keys  =['Total','Ratio'])\n",
    "missing_data.head(50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#most of the top values are missing. since they haveno pattern delete them\n",
    "plt.figure(figsize=(16,12))\n",
    "for idx,f in enumerate(['PoolQC','Utilities','Street','MiscFeature']):\n",
    "    plt.subplot(2,2,idx+1)\n",
    "    sns.scatterplot(x='SalePrice', y= f, data= train)\n",
    "all_data.drop(['PoolQC','Utilities','Street','MiscFeature'], axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "according to the data  NA means None for categorical features so replaceing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['Alley'].fillna('None', inplace=True)\n",
    "all_data['Fence'].fillna('None', inplace=True)\n",
    "all_data['FireplaceQu'].fillna('None', inplace=True)\n",
    "\n",
    "all_data['GarageQual'].fillna('None', inplace=True)\n",
    "all_data['GarageFinish'].fillna('None',inplace=True)\n",
    "all_data['GarageCond'].fillna('None', inplace=True)\n",
    "all_data['GarageType'].fillna('None', inplace=True)\n",
    "\n",
    "all_data['BsmtExposure'].fillna('None', inplace=True)\n",
    "all_data['BsmtCond'].fillna('None', inplace=True)\n",
    "all_data['BsmtQual'].fillna('None', inplace=True)\n",
    "all_data['BsmtFinType1'].fillna('None', inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for categorical features  without NA , fill it with NA'\n",
    "all_data['MasVnrType'].fillna('None',inplace =True)\n",
    "all_data['HasMasVnr'] = all_data['MasVnrType'].apply(lambda x:0 if x=='None' else 1)\n",
    "\n",
    "all_data['MSZoning']=all_data.groupby(['MSSubClass'])['MSZoning'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "all_data['Functional'].fillna('Type', inplace=True)\n",
    "all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\n",
    "all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n",
    "all_data['KitchenQual']=all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n",
    "all_data['SaleType']= all_data['SaleType'].fillna(all_data['SaleType'].fillna(all_data['SaleType'].mode()[0]))\n",
    "all_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['LotFrontage']=all_data.groupby('Neighborhood')['LotFrontage'].transform(lambda x:x.fillna(x.median()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['GarageYrBlt']=(all_data['YearBuilt']+all_data['YearRemodAdd'])/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(x='SalePrice',y='MasVnrArea', hue ='MasVnrType',data=train,legend=None)\n",
    "all_data['MasVnrArea']=all_data.groupby(['MasVnrType'])['MasVnrArea'].transform(lambda x:x.fillna(x.median()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      GarageArea  GarageCars GarageType  GarageYrBlt GarageQual\n",
      "1116         NaN         NaN     Detchd       1961.0       None\n"
     ]
    }
   ],
   "source": [
    "print(all_data[all_data['GarageCars'].isnull()][['GarageArea','GarageCars','GarageType',\n",
    "                                                'GarageYrBlt','GarageQual']])\n",
    "all_data['GarageArea'].fillna(0,inplace=True)\n",
    "all_data['GarageArea'].fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     TotalBsmtSF BsmtQual BsmtCond  BsmtFinSF2  BsmtUnfSF  BsmtFinSF1  \\\n",
      "660          NaN     None     None         NaN        NaN         NaN   \n",
      "\n",
      "     BsmtFullBath  BsmtHalfBath  \n",
      "660           NaN           NaN  \n"
     ]
    }
   ],
   "source": [
    "print(all_data[all_data['TotalBsmtSF'].isnull()][\n",
    "    ['TotalBsmtSF', 'BsmtQual', 'BsmtCond', 'BsmtFinSF2', 'BsmtUnfSF', 'BsmtFinSF1', 'BsmtFullBath','BsmtHalfBath']])\n",
    "all_data['TotalBsmtSF'].fillna(0, inplace=True)\n",
    "all_data['BsmtUnfSF'].fillna(0, inplace=True)\n",
    "all_data['BsmtFinSF1'].fillna(0, inplace=True)\n",
    "all_data['BsmtFinSF2'].fillna(0, inplace=True)\n",
    "all_data['BsmtFullBath'].fillna(0, inplace=True)\n",
    "all_data['BsmtHalfBath'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['YrBltAndRemod']=all_data['YearBuilt']+all_data['YearRemodAdd']\n",
    "all_data['TotalSF']=all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n",
    "\n",
    "all_data['TotalSqrFootage'] = (all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'] +\n",
    "                                 all_data['1stFlrSF'] + all_data['2ndFlrSF'])\n",
    "\n",
    "all_data['TotalBathrooms'] = (all_data['FullBath'] + (0.5 * all_data['HalfBath']) +\n",
    "                               all_data['BsmtFullBath'] + (0.5 * all_data['BsmtHalfBath']))\n",
    "\n",
    "all_data['TotalPorchSF'] = (all_data['OpenPorchSF'] + all_data['3SsnPorch'] +\n",
    "                              all_data['EnclosedPorch'] + all_data['ScreenPorch'] +\n",
    "                              all_data['WoodDeckSF'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data['has2ndfloor'] = all_data['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n",
    "all_data['hasgarage'] = all_data['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n",
    "all_data['hasbsmt'] = all_data['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n",
    "all_data['hasfireplace'] = all_data['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some of the non-numeric predictors are stored as numbers; we convert them into strings \n",
    "all_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n",
    "all_data['YrSold'] = all_data['YrSold'].astype(str)\n",
    "all_data['MoSold'] = all_data['MoSold'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_data = pd.get_dummies(all_data).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating model\n",
    "from sklearn.model_selection import cross_val_score, KFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.preprocessing import RobustScaler\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "from sklearn.linear_model import ElasticNet, Lasso, Ridge,ElasticNetCV, LassoCV,RidgeCV\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\n",
    "from sklearn.svm import SVR\n",
    "\n",
    "from xgboost import XGBRegressor\n",
    "from lightgbm import LGBMRegressor\n",
    "\n",
    "from mlxtend.regressor import StackingCVRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = all_data.iloc[:len(y_train), :]\n",
    "X_test = all_data.iloc[len(y_train):, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining cross validation strategy\n",
    "def rmse_cv(model):\n",
    "    mse =cross_val_score(model,X_train.values,y_train, scoring='neg_mean_squared_error', cv= 5)\n",
    "    rmse=np.sqrt(-mse)\n",
    "    print(\"mse is\", rmse.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.500910518537139, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.383371211410327, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.9306193864466272, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.66519963762931, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.5495931364354085, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.857958392096039, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.7537379589322, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.264426714348082, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.0397088663575484, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.929508385872811, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3167660928190505, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.238061549025458, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.699838522687059, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.519817038994921, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.112440093781175, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.520144744299617, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.86514781531955, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.695009630213834, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.075109918085139, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.033755713903765, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.845807546926086, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.971381126815007, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.444391931062183, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.882325155755068, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.840916501830536, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 6.536372042505925, tolerance: 0.022825630709970138\n",
      "  positive)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.0005623413251903491)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso =Lasso()\n",
    "lasso_search =GridSearchCV(lasso, {'alpha':np.logspace(-4,-3,5)}, cv=5, scoring ='neg_mean_squared_error')\n",
    "lasso_search.fit(X_train,y_train)\n",
    "lasso_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 2.1561196077365468, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.022194563388337585, tolerance: 0.018559329752025996\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.11142702881165718\n"
     ]
    }
   ],
   "source": [
    "lasso_model = make_pipeline(RobustScaler(),Lasso(alpha = 0.0005, random_state=1))\n",
    "rmse_cv(lasso_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ridge(alpha=18.88888888888889)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge =Ridge()\n",
    "ridge_Search = GridSearchCV(ridge, {'alpha':np.linspace(10,30,10)}, cv =5, scoring='neg_mean_squared_error')\n",
    "ridge_Search.fit(X_train,y_train)\n",
    "ridge_Search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.1147947054051905\n"
     ]
    }
   ],
   "source": [
    "ridge_model =make_pipeline(RobustScaler(),Ridge(alpha=18.889))\n",
    "rmse_cv(ridge_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.186357129469706, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.077204990764649, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.91331594329474, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.353108038520961, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.226323948616791, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.038221712290879, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.153609600086832, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.7641487624518035, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.4322196613681, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.3076880328377385, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.236920907087786, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.224539106531781, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.058430446894921, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.5049849564636055, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.383180671635708, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.39770141894708, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.291589435896273, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.847116113237318, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.572157413211008, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.458416910573227, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.47258846406279, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.353814009103947, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.9038615969795463, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.63517242904875, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.518496613617927, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.528175555210893, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.411963571269162, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.9565125474311897, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.694318774552351, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.579678691447316, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.5818971784134215, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.467412112476992, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.006873653126678, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.751114589523435, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.637885498979996, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.633385521869734, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.611911993364498, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.037404210470144, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.805409508542967, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.692933046957651, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.682819558633575, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.572562123933996, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.104034555517634, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.8595584309821485, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.907361417010477, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.738649648813566, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.62218953660457, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.15293321066883, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.908436801615389, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.79647375279098, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.509572844500443, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.402761668694425, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 3.9401637752035614, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.679465772627759, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.567250180764922, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.620025602384138, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.5125563251334855, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.04435824424574, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.795030341308603, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.684253405108868, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.549115074078601, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.616017189739783, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.138147922057277, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.8994949429204295, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.789464222796034, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.773805931011952, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.711489112151006, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.225129711013438, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9964463959233045, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.886646587187707, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.902592972233239, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.801082972192198, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.306805713942566, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.087125871650153, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.977187390445682, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.981571808322821, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.884754397917588, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.382514966111753, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.171827984434385, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.770919997025183, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.055418822658273, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.963731159293652, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.4532688925562605, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.251101624601557, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.845985530377395, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.12590530741637, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.038767371383157, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.519731448880789, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.325398962164634, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9181306237068565, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.193370303205378, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.109673870061272, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.582941806829452, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.395045895827362, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9868507862146485, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.258210738995958, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.176954736456894, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6432914830681415, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.460624085192639, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.052759822159795, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.760140344546845, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.657262104071976, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.176201320287793, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.940603353720958, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.83067489612801, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.890366840377686, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.794104689016274, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.298157681639937, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.078062635493564, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.968966423398348, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.008852444987824, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9188497095174855, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.410236564975933, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.203831854571333, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.80118896816229, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.119002263230859, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.0337008114996316, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.514010811596209, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.31843281577031, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.91227964100808, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.2210777939489725, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.13937871910147, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.610095927232866, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.423186226095698, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.015723176626838, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.316332598614989, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.237383858024852, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.69937384460297, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.519476520384014, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.111717752605691, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.40649574997755, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.329416207345334, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.783075949930056, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.608396010768823, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.5983192528327965, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.492399278299111, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.416606851843604, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.861508094045281, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3371996235094095, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.67398030640062, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.575296234508295, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.498760430071352, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.936218292161998, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.412290800960623, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.745924481562403, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.653895977741815, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.57658533480613, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.006765184500592, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.483068258221895, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.814223668208729, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.969045398115432, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.872380630204561, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.372752322102067, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.157024725501018, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.757579594829433, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.112438634273493, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.027916717337075, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.509227635596547, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.311590820526563, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9053829668830335, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.245550446432012, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.167363974825767, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.634564234979772, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.4491393999378746, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.040706055471318, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.370105980562007, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.294667730149663, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.750604991432156, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.5732316121648156, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.559338377038456, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.487377892355898, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.412329710793332, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.857520283809196, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.334843109273207, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.670112015656755, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.596985278597568, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.521090439237283, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.957445857934572, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.431651391196632, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.7651382835897005, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.6991917248200465, tolerance: 0.018456663723665112\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.622309364907446, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.051215469828974, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.523315117432574, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.854062543900702, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.422033597424468, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.821681582490952, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.140658873856067, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.15963635865114, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.936528756682106, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.497847423638212, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.845181100187194, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.662123817160211, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.055741494036081, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.013033730077033, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.578760521215821, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.914836035113896, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.749182079465558, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.125824132584557, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.086144085738475, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.143687990331809, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.058838221823597, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.538864294234542, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.340672168958603, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.936458046035258, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.304840855744607, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.219761071174571, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.69003477628442, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.507093118300357, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.099879266943608, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.452169198470848, tolerance: 0.018456663723665112\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.372404798795907, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.826804046343065, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.653892730011686, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.642551007677607, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.590272953154736, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.51644846224565, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.95264235323711, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.426223295087039, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.762188796743317, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.718837047284483, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.6423642382733705, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.069838419657369, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.541828548869464, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.8716407237114545, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.451578524566174, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.80552128517814, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.1802492829768685, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.013670452744591, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.971851216544065, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.554207922601161, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.894510448315618, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.727309897450795, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.104976271982604, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.064824167896781, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.043518157871597, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.980015962627091, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.815715856308338, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.190561679945963, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.152155630159122, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.128316368007848, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.061493631468873, tolerance: 0.01754854726026791\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.899232381305711, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.273313440074573, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.234795448294001, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.209222662853311, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.138037880918659, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.977813343805604, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.352824213873966, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3160426430451295, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.299565276500514, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.210444757224954, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6842234914265255, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.500169841942871, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.09492021457522, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.477155170600221, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.387488392229262, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.847980164946192, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.353116941006944, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.662577696396051, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.637876894657341, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.545459466918306, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.995724599256214, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.46864498247848, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.803119813362603, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.784742575968416, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.874208078769009, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.132335372126179, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.602282251896611, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.930105646683885, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.529866289591097, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.87381890844736, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.7047379119394845, tolerance: 0.018147006279346574\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.084043983192305, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.043138939998722, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.039246999432437, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.976484364461149, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.811415672573022, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.186961493634003, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.148828568075538, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.140852108472444, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.0739175626218955, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.911146643822741, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.285691138296019, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.247764146897773, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.236125894826578, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.164188943716476, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.005087132860849, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.380281200307687, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.344420431038648, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.326464363735021, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.250899080295167, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.094993970019686, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.654318854760325, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.437314195072281, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.410636394293375, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.333303902205666, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.340472547361433, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.744490464478527, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.700132685911133, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.441848436246111, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.358716017384664, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.8169250523787435, tolerance: 0.018147006279346574\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.642049532591422, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6332655170570565, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.63372271523486, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.542189363564402, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.991093851333657, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.463674266474909, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.798795859622486, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.481599009345026, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9678020959749825, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.14961599539715, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.618751819058883, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.946094404617676, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.565031560908918, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.904477457077825, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.737213332896678, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.115294638769892, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.076359958856111, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.086858789155082, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.02254136316528, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.858223230545275, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.233261896291504, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.195345953155996, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.200946237157046, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.131821207314011, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.969957739826139, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.345240945027915, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3088604163294155, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.307216263882866, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.233388299337175, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.076506171079007, tolerance: 0.018147006279346574\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.636222643654743, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.418499459699219, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.4062892711764015, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.330082922676221, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.336950392058358, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.740562815672738, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.695274664965694, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.499262786815345, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.93530840603546, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.432978397691288, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.839857280031334, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.7976423237710915, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.920872267453933, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.013440655853497, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.452452307513489, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.801358276327763, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.8918002867629635, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.574152404998258, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.494083398448594, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.938405359472531, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.41084056029246, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.74967522476585, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.775549267019565, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.041541558248725, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.12310710090982, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.5928138339040885, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.922269257716786, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.561519391606644, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.900890389342453, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.73294038796152, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.1116525134051445, tolerance: 0.018559329752025996\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.072852456603204, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.0997030942807315, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.034794735262304, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.870680663252337, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.246091935530249, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.208720231060262, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.228031525321513, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.15752843504599, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9971770312376425, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.372595967439658, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.337219937025673, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.346231374816671, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.272334326652452, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.1363658859773045, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.677368845146635, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.459879476755672, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.457524691639588, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.915142261100174, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.389171088384639, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.794009069760522, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.751851711320349, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.896056039602138, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.988596433092552, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.425178759405085, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.769725347108811, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.861698963262513, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.980267086842826, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.073247203915157, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.50718282936374, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.911648873541523, tolerance: 0.018559329752025996\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.531645115254172, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.058893666373779, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.1520864189627495, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.579625669453949, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9899879805394765, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.643595637891808, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.697136452113, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.617970931091314, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.050900493079282, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.522492626248101, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.855863511786465, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.516000848278096, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.862762082087733, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.653627232371052, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.07255474644998, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.0326918683025825, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.07782511732328, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.014868452499484, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.849953527409083, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.225876965584178, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.189070141529024, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.224006032723611, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.153871735416837, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.992997684668295, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.368854704428225, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3338916124002145, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.356342236792487, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.282616041266584, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.243464847998036, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.688415180578305, tolerance: 0.018559329752025996\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.471011177982619, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.478217549281875, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.9172647692104965, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.4122693165819085, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.818214129621452, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.77632739762403, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.922532793125704, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.018222971285601, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.456342785914781, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.795028837998895, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.897410949266621, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.016821838356603, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.110254662558209, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.541203430429883, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.948628745343, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.602898352694553, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.101579693259683, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.195976854626571, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.620043890168447, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.032427837028205, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.683574009771228, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.177733960456379, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.273834140402544, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.69657124875241, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.108045783508005, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.754182574895449, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.7818660385089515, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.858175582593009, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.157002148974334, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.626225526702596, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.953282332520992, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.017027461610009, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.961707550287253, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.794866205487684, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.172042119979084, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.135256884852511, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.187643293682115, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.120783307774059, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.958113875424385, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.333917370877483, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.2983207996206545, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.338099601213909, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.265035023377188, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.149708387560175, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.669459732517113, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.452797019349136, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.4742006690507115, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.918285457188555, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.4084826574036216, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.814216334495651, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.7726583225183905, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.931748831009186, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.025906565357708, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.463138361331928, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.812212983256653, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 7.186404609770663, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.032907004874012, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.126810460510922, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.556291655053581, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.964925081631329, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.619374686564157, tolerance: 0.018580334374385138\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.1246899414602485, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.219685383677099, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.6429333485052044, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.055588055361138, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.705211176296366, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.205925443911234, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.3036418762044315, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.725847442124247, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.137020547933302, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.780998909199957, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.278894614729071, tolerance: 0.018456663723665112\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.382237709255808, tolerance: 0.01754854726026791\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.801660059807411, tolerance: 0.018147006279346574\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 5.213872303434785, tolerance: 0.018559329752025996\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 4.848161139021823, tolerance: 0.018580334374385138\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 6.761467710550026, tolerance: 0.022825630709970138\n",
      "  positive)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "ElasticNet(alpha=0.00039999999999999996, l1_ratio=1.3888888888888888)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "enet=  ElasticNet()\n",
    "enet_search = GridSearchCV(enet,{'alpha':np.linspace(0.0001,0.001,10),\"l1_ratio\":np.linspace(0.5,1.5,10)}, cv=5,scoring='neg_mean_squared_error')\n",
    "enet_search.fit(X_train,y_train)\n",
    "enet_search.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.12747668195456532\n"
     ]
    }
   ],
   "source": [
    "enet_model =make_pipeline(RobustScaler(),ElasticNet(alpha=0.004, l1_ratio=1.4, random_state=3 ))\n",
    "rmse_cv(enet_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.12014258107745938\n"
     ]
    }
   ],
   "source": [
    "gbr = GradientBoostingRegressor(learning_rate=0.05, min_samples_leaf=5,min_samples_split=10,\n",
    "                               max_depth=4,n_estimators=3000)\n",
    "rmse_cv(gbr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.1370278965711741\n"
     ]
    }
   ],
   "source": [
    "rf=RandomForestRegressor(min_samples_leaf=4,min_samples_split=8)\n",
    "rmse_cv(rf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.17464272656528562\n"
     ]
    }
   ],
   "source": [
    "svr=make_pipeline(RobustScaler(),SVR(C=20, epsilon= 0.005, gamma =0.0003))\n",
    "rmse_cv(svr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is nan\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [22:44:42] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n"
     ]
    }
   ],
   "source": [
    "xgb =XGBRegressor(learning_rate= 0.01,max_depth=5,n_estimators=3000,\n",
    "                 n_thread=-1,n_jobs=-1, objective='reg:squarederrir')\n",
    "rmse_cv(xgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is 0.11819118741371244\n"
     ]
    }
   ],
   "source": [
    "lgb  = LGBMRegressor(objective='regression',learning_rate=0.01, max_depth=5,num_leaves=4,\n",
    "                    n_estimators=3000)\n",
    "rmse_cv(lgb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.03025085160131269, tolerance: 0.014836308874372504\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in fit\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in <listcomp>\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\utils\\validation.py\", line 72, in inner_f\n",
      "    return f(**kwargs)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 773, in cross_val_predict\n",
      "    for train, test in cv.split(X, y, groups))\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 1029, in __call__\n",
      "    if self.dispatch_one_batch(iterator):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 847, in dispatch_one_batch\n",
      "    self._dispatch(tasks)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 765, in _dispatch\n",
      "    job = self._backend.apply_async(batch, callback=cb)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 208, in apply_async\n",
      "    result = ImmediateResult(func)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 572, in __init__\n",
      "    self.results = batch()\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in __call__\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in <listcomp>\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 862, in _fit_and_predict\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [22:50:29] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.9814145309005982, tolerance: 0.01390626140478449\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.7303664955694047, tolerance: 0.014075212400739832\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.09390943005032693, tolerance: 0.014017239236725054\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.1267604983933666, tolerance: 0.014374435737018548\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.1643208128044797, tolerance: 0.013810191799756684\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in fit\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in <listcomp>\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\utils\\validation.py\", line 72, in inner_f\n",
      "    return f(**kwargs)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 773, in cross_val_predict\n",
      "    for train, test in cv.split(X, y, groups))\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 1029, in __call__\n",
      "    if self.dispatch_one_batch(iterator):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 847, in dispatch_one_batch\n",
      "    self._dispatch(tasks)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 765, in _dispatch\n",
      "    job = self._backend.apply_async(batch, callback=cb)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 208, in apply_async\n",
      "    result = ImmediateResult(func)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 572, in __init__\n",
      "    self.results = batch()\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in __call__\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in <listcomp>\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 862, in _fit_and_predict\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [22:54:10] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 1.7004789707222154, tolerance: 0.014618081697289854\n",
      "  positive)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in fit\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in <listcomp>\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\utils\\validation.py\", line 72, in inner_f\n",
      "    return f(**kwargs)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 773, in cross_val_predict\n",
      "    for train, test in cv.split(X, y, groups))\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 1029, in __call__\n",
      "    if self.dispatch_one_batch(iterator):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 847, in dispatch_one_batch\n",
      "    self._dispatch(tasks)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 765, in _dispatch\n",
      "    job = self._backend.apply_async(batch, callback=cb)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 208, in apply_async\n",
      "    result = ImmediateResult(func)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 572, in __init__\n",
      "    self.results = batch()\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in __call__\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in <listcomp>\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 862, in _fit_and_predict\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [22:58:02] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.35292963692234824, tolerance: 0.014580056498466155\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\linear_model\\_coordinate_descent.py:531: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations. Duality gap: 0.04453991725671269, tolerance: 0.014774048894487073\n",
      "  positive)\n",
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in fit\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in <listcomp>\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\utils\\validation.py\", line 72, in inner_f\n",
      "    return f(**kwargs)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 773, in cross_val_predict\n",
      "    for train, test in cv.split(X, y, groups))\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 1029, in __call__\n",
      "    if self.dispatch_one_batch(iterator):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 847, in dispatch_one_batch\n",
      "    self._dispatch(tasks)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 765, in _dispatch\n",
      "    job = self._backend.apply_async(batch, callback=cb)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 208, in apply_async\n",
      "    result = ImmediateResult(func)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 572, in __init__\n",
      "    self.results = batch()\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in __call__\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in <listcomp>\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 862, in _fit_and_predict\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [23:02:18] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse is nan\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py:552: FitFailedWarning: Estimator fit failed. The score on this train-test partition for these parameters will be set to nan. Details: \n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 531, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in fit\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\mlxtend\\regressor\\stacking_cv_regression.py\", line 191, in <listcomp>\n",
      "    for regr in self.regr_])\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\utils\\validation.py\", line 72, in inner_f\n",
      "    return f(**kwargs)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 773, in cross_val_predict\n",
      "    for train, test in cv.split(X, y, groups))\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 1029, in __call__\n",
      "    if self.dispatch_one_batch(iterator):\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 847, in dispatch_one_batch\n",
      "    self._dispatch(tasks)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 765, in _dispatch\n",
      "    job = self._backend.apply_async(batch, callback=cb)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 208, in apply_async\n",
      "    result = ImmediateResult(func)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\_parallel_backends.py\", line 572, in __init__\n",
      "    self.results = batch()\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in __call__\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\joblib\\parallel.py\", line 253, in <listcomp>\n",
      "    for func, args, kwargs in self.items]\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\", line 862, in _fit_and_predict\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\", line 396, in fit\n",
      "    self.get_booster().set_attr(scikit_learn=None)\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 216, in train\n",
      "    \"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\", line 74, in _train_internal\n",
      "    if version % 2 == 0:\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 1109, in update\n",
      "    **kwargs\n",
      "  File \"C:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\", line 176, in _check_call\n",
      "    def _check_call(ret):\n",
      "xgboost.core.XGBoostError: [23:07:05] src/objective/objective.cc:23: Unknown objective function reg:squarederrir\n",
      "\n",
      "  FitFailedWarning)\n"
     ]
    }
   ],
   "source": [
    "stack_model = StackingCVRegressor([lasso_model, ridge_model, enet_model, gbr, rf, svr, xgb, lgb], \n",
    "                                  meta_regressor=lgb,\n",
    "                                  use_features_in_secondary=True)\n",
    "rmse_cv(stack_model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rmsle(y,y_pred):\n",
    "    return np.sqrt(mean_squared_error(y,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "ename": "XGBoostError",
     "evalue": "[23:08:27] src/objective/objective.cc:23: Unknown objective function reg:squarederrir",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mXGBoostError\u001b[0m                              Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-78-147a5231677e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mrf_model\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[0msvr_model\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0msvr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mxgb_model\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[0mlgb_mdoel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlgb\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[0mstack_model\u001b[0m \u001b[1;33m=\u001b[0m\u001b[0mstackmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, callbacks)\u001b[0m\n\u001b[0;32m    394\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_booster\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msave_model\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    395\u001b[0m         \u001b[1;31m# Delete the attribute after save\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 396\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_booster\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_attr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mscikit_learn\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    397\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    398\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mload_model\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\u001b[0m in \u001b[0;36mtrain\u001b[1;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, learning_rates)\u001b[0m\n\u001b[0;32m    214\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    215\u001b[0m \u001b[1;32mclass\u001b[0m \u001b[0mCVPack\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 216\u001b[1;33m     \u001b[1;34m\"\"\"\"Auxiliary datastruct to hold one fold of CV.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    217\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdtest\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mparam\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    218\u001b[0m         \u001b[1;34m\"\"\"\"Initialize the CVPack\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\training.py\u001b[0m in \u001b[0;36m_train_internal\u001b[1;34m(params, dtrain, num_boost_round, evals, obj, feval, xgb_model, callbacks)\u001b[0m\n\u001b[0;32m     72\u001b[0m         \u001b[1;31m# Distributed code: need to resume to this point.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     73\u001b[0m         \u001b[1;31m# Skip the first update if it is a recovery step.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 74\u001b[1;33m         \u001b[1;32mif\u001b[0m \u001b[0mversion\u001b[0m \u001b[1;33m%\u001b[0m \u001b[1;36m2\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     75\u001b[0m             \u001b[0mbst\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     76\u001b[0m             \u001b[0mbst\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msave_rabit_checkpoint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\u001b[0m in \u001b[0;36mupdate\u001b[1;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[0;32m   1107\u001b[0m         \u001b[0mParameters\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1108\u001b[0m         \u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1109\u001b[1;33m         \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1110\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0mattributes\u001b[0m \u001b[0mto\u001b[0m \u001b[0mset\u001b[0m\u001b[1;33m.\u001b[0m \u001b[0mSetting\u001b[0m \u001b[0ma\u001b[0m \u001b[0mvalue\u001b[0m \u001b[0mto\u001b[0m \u001b[1;32mNone\u001b[0m \u001b[0mdeletes\u001b[0m \u001b[0man\u001b[0m \u001b[0mattribute\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1111\u001b[0m         \"\"\"\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\envs\\tfgpu\\lib\\site-packages\\xgboost\\core.py\u001b[0m in \u001b[0;36m_check_call\u001b[1;34m(ret)\u001b[0m\n\u001b[0;32m    174\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    175\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 176\u001b[1;33m \u001b[1;32mdef\u001b[0m \u001b[0m_check_call\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mret\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    177\u001b[0m     \"\"\"Check the return value of C API call\n\u001b[0;32m    178\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mXGBoostError\u001b[0m: [23:08:27] src/objective/objective.cc:23: Unknown objective function reg:squarederrir"
     ]
    }
   ],
   "source": [
    "lasso_model = lasso_model.fit(X_train,y_train)\n",
    "ridge_model=ridge_model.fit(X_train,y_train)\n",
    "enet_model=enet_model.fit(X_train,y_train)\n",
    "gbr_model = gbr.fit(X_train,y_train)\n",
    "rf_model = rf.fit(X_train,y_train)\n",
    "svr_model = svr.fit(X_train,y_train)\n",
    "xgb_model = xgb.fit(X_train,y_train)\n",
    "lgb_mdoel = lgb.fit(X_train,y_train)\n",
    "stack_model =stackmodel.fit(np.array(X_train),np.array(y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def combine_models_predict(X):\n",
    "    return ((0.1 * enet_model.predict(X)) + \\\n",
    "            (0.1 * ridge_model.predict(X)) + \\\n",
    "            (0.1 * lasso_model.predict(X)) + \\\n",
    "            (0.15 * gbdt_model.predict(X)) + \\\n",
    "            (0.15 * xgb_model.predict(X)) + \\\n",
    "            (0.1 * lgb_model.predict(X)) + \\\n",
    "            (0.075 * rf_model.predict(X)) + \\\n",
    "            (0.075 * svr_model.predict(X)) + \\\n",
    "            (0.15 * stack_model.predict(np.array(X)))\n",
    "           )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(rmsle(y_train, combine_models_predict(X_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_result= combine_models_predict(X_test)\n",
    "result= np.expm1(log_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tfgpu",
   "language": "python",
   "name": "tfgpu"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
